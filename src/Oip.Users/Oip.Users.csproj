<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
        <SpaRoot>.\..\Oip.WebClient\</SpaRoot>
        <SpaProxyServerUrl>https://localhost:50003</SpaProxyServerUrl>
        <SpaProxyLaunchCommand>npm run start:rtds</SpaProxyLaunchCommand>
        <ImplicitUsings>enable</ImplicitUsings>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
    </PropertyGroup>
    
    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="8.0.11"/>
        <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.21.0"/>
        <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="8.0.14"/>
        <PackageReference Include="Swashbuckle.AspNetCore" Version="6.6.2"/>
        <PackageReference Include="NLog" Version="5.3.4"/>
        <PackageReference Include="NLog.Web.AspNetCore" Version="5.3.15"/>
        <PackageReference Include="Grpc.AspNetCore" Version="2.62.0"/>
        <PackageReference Include="Google.Protobuf" Version="3.27.1"/>
        <PackageReference Include="Grpc.Tools" Version="2.62.0" PrivateAssets="All"/>
        <PackageReference Include="Riok.Mapperly" Version="4.2.1" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\Oip.Base\Oip.Base.csproj"/>
        <ProjectReference Include="..\Oip.Rtds.Data.Postgres\Oip.Rtds.Data.Postgres.csproj"/>
        <ProjectReference Include="..\Oip.Rtds.Data.SqlServer\Oip.Rtds.Data.SqlServer.csproj"/>
    </ItemGroup>

    <ItemGroup>
        <EmbeddedResource Update="Properties\Resources.resx">
            <Generator>ResXFileCodeGenerator</Generator>
            <LastGenOutput>Resources.Designer.cs</LastGenOutput>
        </EmbeddedResource>
    </ItemGroup>

    <ItemGroup>
        <Compile Update="Properties\Resources.Designer.cs">
            <DesignTime>True</DesignTime>
            <AutoGen>True</AutoGen>
            <DependentUpon>Resources.resx</DependentUpon>
        </Compile>
    </ItemGroup>

    <ItemGroup>
      <Protobuf Include="Protos\user_service.proto">
        <GrpcServices>Server</GrpcServices>
        <Access>Public</Access>
        <ProtoCompile>True</ProtoCompile>
        <CompileOutputs>True</CompileOutputs>
        <OutputDir>obj/Debug/net8.0/</OutputDir>
        <Generator>MSBuild:Compile</Generator>
      </Protobuf>
    </ItemGroup>

    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE."/>
        <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..."/>
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install"/>
    </Target>

    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
        <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install"/>
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build"/>

        <!-- Include the newly-built files in the publish output -->
        <ItemGroup>
            <DistFiles Include="$(SpaRoot)dist\oip\**; $(SpaRoot)dist-server\**"/>
            <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
                <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>
</Project>
