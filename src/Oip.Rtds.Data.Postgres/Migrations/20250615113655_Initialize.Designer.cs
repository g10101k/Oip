// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Oip.Rtds.Data.Contexts;

#nullable disable

namespace Oip.Rtds.Data.Postgres.Migrations
{
    [DbContext(typeof(RtdsMetaContext))]
    [Migration("20250615113655_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Oip.Rtds.Data.Entities.TagEntity", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TagId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("Compressing")
                        .HasColumnType("boolean");

                    b.Property<long?>("CompressionMaxTime")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompressionMinTime")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Descriptor")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DigitalSet")
                        .HasColumnType("text");

                    b.Property<string>("ErrorCalculation")
                        .HasColumnType("text");

                    b.Property<string>("InstrumentTag")
                        .HasColumnType("text");

                    b.Property<string>("Interface")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Partition")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool?>("Scan")
                        .HasColumnType("boolean");

                    b.Property<double>("Span")
                        .HasColumnType("double precision");

                    b.Property<bool>("Step")
                        .HasColumnType("boolean");

                    b.Property<string>("TimeCalculation")
                        .HasColumnType("text");

                    b.Property<string>("Uom")
                        .HasColumnType("text");

                    b.Property<string>("ValueCaclulation")
                        .HasColumnType("text");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer");

                    b.Property<double>("Zero")
                        .HasColumnType("double precision");

                    b.HasKey("TagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tag", "rtds");
                });
#pragma warning restore 612, 618
        }
    }
}
