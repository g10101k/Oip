// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oip.Rtds.Data.Contexts;

#nullable disable

namespace Oip.Rtds.SqlServer.Migrations
{
    [DbContext(typeof(RtdsMetaContext))]
    [Migration("20250613164952_ChangeType")]
    partial class ChangeType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Oip.Rtds.Data.Entities.TagEntity", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TagId"));

                    b.Property<bool?>("Archiving")
                        .HasColumnType("bit");

                    b.Property<double?>("CompDev")
                        .HasColumnType("float");

                    b.Property<int?>("CompMax")
                        .HasColumnType("int");

                    b.Property<int?>("CompMin")
                        .HasColumnType("int");

                    b.Property<bool?>("Compressing")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriptor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DigitalSet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngUnits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ExcDev")
                        .HasColumnType("float");

                    b.Property<int?>("ExcMax")
                        .HasColumnType("int");

                    b.Property<int?>("ExcMin")
                        .HasColumnType("int");

                    b.Property<bool?>("Future")
                        .HasColumnType("bit");

                    b.Property<string>("InstrumentTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Location1")
                        .HasColumnType("int");

                    b.Property<int?>("Location2")
                        .HasColumnType("int");

                    b.Property<int?>("Location3")
                        .HasColumnType("int");

                    b.Property<int?>("Location4")
                        .HasColumnType("int");

                    b.Property<int?>("Location5")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Partition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Scan")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("Span")
                        .HasColumnType("int");

                    b.Property<bool?>("Step")
                        .HasColumnType("bit");

                    b.Property<int?>("UserInt1")
                        .HasColumnType("int");

                    b.Property<int?>("UserInt2")
                        .HasColumnType("int");

                    b.Property<int?>("UserInt3")
                        .HasColumnType("int");

                    b.Property<int?>("UserInt4")
                        .HasColumnType("int");

                    b.Property<int?>("UserInt5")
                        .HasColumnType("int");

                    b.Property<double?>("UserReal1")
                        .HasColumnType("float");

                    b.Property<double?>("UserReal2")
                        .HasColumnType("float");

                    b.Property<double?>("UserReal3")
                        .HasColumnType("float");

                    b.Property<double?>("UserReal4")
                        .HasColumnType("float");

                    b.Property<double?>("UserReal5")
                        .HasColumnType("float");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.Property<int?>("Zero")
                        .HasColumnType("int");

                    b.HasKey("TagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tag", "rtds");
                });
#pragma warning restore 612, 618
        }
    }
}
